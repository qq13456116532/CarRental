@page "/confirm"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthService AuthService
@using Data
@using Services

<EditForm Model="pageData" OnValidSubmit="HandleJiesuan">
    <DataAnnotationsValidator />
    <div class="order-form">

        <div class="order-details">
            <h3>订单明细</h3>
            <div class="list-container">
                <div class="list-th">
                    <span>商品名称</span>
                    <span>价格</span>
                    <span>数量</span>
                    <span>操作</span>
                </div>
                <div class="list">
                    @* Ensure OrderItem.razor uses a class like "quantity-input" for its quantity InputNumber
                       and "delete-icon" for its delete button/image for the CSS to apply.
                       Example: <InputNumber @bind-Value="ItemData.Count" class="quantity-input" />
                                <img src="images/delete.svg" class="delete delete-icon" />
                    *@
                    <OrderItem ItemData="pageData" OnCountChanged="OnCountChange" />
                </div>
            </div>
        </div>

        <div class="remark-address-group">
            <div class="remark-group">
                <h3>备注</h3>
                <InputTextArea class="remark-input" @bind-Value="pageData.Remark" Placeholder="输入备注信息，100字以内" />
                <ValidationMessage For="@(() => pageData.Remark)" />
            </div>
            <div class="address-group-container"> @* Wrapper for AddressBlock styling if needed *@
                 <h3>配送地址</h3>
                <AddressBlock PageData="pageData" OnAddAddress="HandleAdd" />
                @* Validation for address fields might be inside AddressBlock or here if PageData props are directly bound *@
                 @if (submitAttempted && string.IsNullOrEmpty(pageData.ReceiverName))
                {
                    <div class="validation-message custom-validation-error">请选择或添加一个收货地址。</div>
                }
            </div>
        </div>

        <div class="checkout-section">
            <h3>结算信息</h3>
            <div class="price-view">
                <div class="price-item">
                    <div>商品总价</div>
                    <div>&yen;@pageData.Amount.ToString("F2")</div>
                </div>
                <div class="price-item">
                    <div>运费</div>
                    <div>&yen;0.00</div> @* Placeholder, adjust as needed *@
                </div>
                <div class="price-item">
                    <div>优惠</div>
                    <div>-&yen;0.00</div> @* Placeholder *@
                </div>
                <div class="total-price">
                    <span>实付款</span>
                    <div>&yen;@pageData.Amount.ToString("F2")</div> @* Adjust if there are discounts/shipping *@
                </div>
                <div class="action-buttons">
                    <button type="button" class="btn-back" @onclick="HandleBack">返回购物车</button>
                    <button class="btn-submit" type="submit">提交订单</button>
                </div>
            </div>
        </div>

    </div>
</EditForm>

@* This is where your Address Add/Edit Modal might be invoked or defined.
   The CSS provided above includes .address-modal-form styling.
   Example of how you might structure its invocation or content:
*@
@*
<BlazorModal @ref="addressModalRef" Title="管理收货地址">
    <Content>
        <div class="address-modal-form">
             // Using the AddressForm.razor component structure provided by user
            <AddressForm modal="modal" OnClickClose="CloseAddressModal" />
        </div>
    </Content>
</BlazorModal>
*@


@code {
    private PageData pageData = new();
    // private ModalData modal = new(); // For the address modal
    // private BlazorModal addressModalRef; // Reference to a modal component if using one

    private bool submitAttempted = false;


    [Parameter]
    public string? id { get; set; }
    [Parameter]
    public string? title { get; set; }
    [Parameter]
    public string? cover { get; set; }
    [Parameter]
    public string? price { get; set; }

    protected override async Task OnInitializedAsync() // Changed to async Task
    {
        pageData.Id = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(Navigation.Uri).Query).TryGetValue("id", out var idFromQuery) ? idFromQuery.ToString() : "default_id";
        pageData.Title = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(Navigation.Uri).Query).TryGetValue("title", out var titleFromQuery) ? titleFromQuery.ToString() : "示例商品";
        pageData.Cover = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(Navigation.Uri).Query).TryGetValue("cover", out var coverFromQuery) ? coverFromQuery.ToString() : "images/placeholder.jpg";
        string priceFromQueryStr = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(new Uri(Navigation.Uri).Query).TryGetValue("price", out var priceFromQuery) ? priceFromQuery.ToString() : "0";
        
        pageData.Price = priceFromQueryStr;

        if (decimal.TryParse(pageData.Price, out var p))
        {
            pageData.Amount = p * pageData.Count; // Initial amount based on count = 1
        }
        else
        {
            pageData.Amount = 0; // Default if price is invalid
        }
        
        // Ensure cover has a proper path
        if (!string.IsNullOrEmpty(pageData.Cover) && !pageData.Cover.StartsWith("images/") && !pageData.Cover.StartsWith("http"))
        {
            pageData.Cover = $"images/{pageData.Cover}";
        }


        await ListAddressData(); // Make it awaitable
    }

    private void HandleAdd() {
        Console.WriteLine("新增地址按钮点击");
        // modal.Form = new Address(); // Reset form for new address
        // addressModalRef.Show(); // Show a modal for adding/editing address
    }
    // private async Task CloseAddressModal() => await addressModalRef.Hide();
    // private async Task HandleAddressSaved() {
    //     await ListAddressData();
    //     await addressModalRef.Hide();
    // }


    private void OnCountChange(int count)
    {
        pageData.Count = count;
        if (decimal.TryParse(pageData.Price, out var o))
        {
            pageData.Amount = o * count;
        }
        StateHasChanged(); // Update UI when amount changes
    }

    private void HandleBack() => Navigation.NavigateTo("/"); // Or to cart page

    private async Task HandleJiesuan() // Changed to async Task
    {
        submitAttempted = true; // Mark that submit was attempted for validation display
        if (string.IsNullOrEmpty(pageData.ReceiverName) || pageData.ReceiverName == "default") // More robust check
        {
            Console.WriteLine("请选择或添加一个有效的收货地址。");
            // Optionally, focus on address section or show a more prominent UI message
            StateHasChanged(); // Re-render to show validation message
            return;
        }

        Console.WriteLine("表单有效，准备结算...");
        // Simulate API call for order submission
        await Task.Delay(1000); 
        
        Console.WriteLine("结算成功，跳转支付页面");
        // Construct query parameters for the pay page
        var queryParams = new Dictionary<string, string>()
        {
            ["amount"] = pageData.Amount.ToString("F2"),
            // Potentially pass order ID or other necessary info
            ["orderId"] = pageData.Id ?? "new_order" 
        };
        var uri = Microsoft.AspNetCore.WebUtilities.QueryHelpers.AddQueryString("/pay", queryParams);
        Navigation.NavigateTo(uri);
    }

    private async Task ListAddressData()
    {
        string token = AuthService.UserToken ?? ""; // Handle null token
        if (string.IsNullOrEmpty(token)) {
            Console.WriteLine("User not authenticated. Cannot load addresses.");
            // Set default or empty address state
            pageData.ReceiverName = null; // Indicate no address selected
            pageData.ReceiverPhone = null;
            pageData.ReceiverAddress = null;
            pageData.Remark = pageData.Remark; // Keep existing remark or clear it
            StateHasChanged();
            return;
        }

        var requestUrl = $"{Navigation.BaseUri}api/Index/addresses?token={token}";
        try
        {
            List<Address>? res = await Http.GetFromJsonAsync<List<Address>>(requestUrl);

            if (res != null && res.Any())
            {
                var defaultAddr = res.FirstOrDefault(a => a.Default) ?? res[0]; // Prefer default, else first
                pageData.ReceiverName = defaultAddr.Name;
                pageData.ReceiverPhone = defaultAddr.Mobile;
                pageData.ReceiverAddress = defaultAddr.Description; // Assuming 'Desc' is the full address string
                // pageData.Remark = defaultAddr.Description; // This seems to overwrite user's current remark input
            }
            else
            {
                pageData.ReceiverName = null; // No addresses found
                pageData.ReceiverPhone = null;
                pageData.ReceiverAddress = null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching addresses: {ex.Message}");
            pageData.ReceiverName = null; // Error state
            pageData.ReceiverPhone = null;
            pageData.ReceiverAddress = null;
        }
        StateHasChanged(); // Ensure UI reflects fetched address or lack thereof
    }

    // Existing PageData class
    public class PageData
    {
        public string? Id { get; set; }
        
        [Required(ErrorMessage = "商品标题不能为空")]
        public string? Title { get; set; }
        public string? Cover { get; set; }
        
        [Required(ErrorMessage = "价格不能为空")]
        [RegularExpression(@"^\d+(\.\d{1,2})?$", ErrorMessage = "价格格式无效")]
        public string? Price { get; set; }
        
        [Range(1, 100, ErrorMessage = "数量必须在1到100之间")]
        public int Count { get; set; } = 1;
        public decimal Amount { get; set; }
        
        [MaxLength(100, ErrorMessage = "备注不能超过100个字符")]
        public string? Remark { get; set; }
        
        public string? ReceiverName { get; set; }
        public string? ReceiverPhone { get; set; }
        public string? ReceiverAddress { get; set; }
    }

}