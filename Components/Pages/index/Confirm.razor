@page "/confirm"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthService AuthService
@using Data
@using Microsoft.AspNetCore.WebUtilities
@using Services
@using CarRental.Components 

<EditForm Model="pageData" OnValidSubmit="HandleJiesuan">
    <DataAnnotationsValidator />
    <div class="order-form">

        <div class="order-details">
            <h3>订单明细</h3>
            <div class="list-container">
                <div class="list-th">
                    <span>商品名称</span>
                    <span>价格</span>
                    <span>数量</span>
                    <span>操作</span>
                </div>
                <div class="list">
                    <OrderItem ItemData="pageData" OnCountChanged="OnCountChange" OnOrderDeleted="OnOrderDelete" />
                </div>
            </div>
        </div>

        <div class="remark-address-group">
            <div class="remark-group">
                <h3>备注</h3>
                <InputTextArea class="remark-input" @bind-Value="pageData.Remark" Placeholder="输入备注信息，100字以内" />
                <ValidationMessage For="@(() => pageData.Remark)" />
            </div>
            <div class="address-group-container">
                <h3>配送地址</h3>
                <AddressBlock PageData="pageData" OnManageAddress="ShowAddressModal" />
                @if (submitAttempted && string.IsNullOrEmpty(pageData.ReceiverName))
                {
                    <div class="validation-message custom-validation-error">请选择或添加一个收货地址。</div>
                }
            </div>
        </div>

        <div class="checkout-section">
            <h3>结算信息</h3>
            <div class="price-view">
                <div class="price-item">
                    <div>商品总价</div>
                    <div>&yen;@pageData.Amount.ToString("F2")</div>
                </div>
                <div class="price-item">
                    <div>运费</div>
                    <div>&yen;0.00</div>
                </div>
                <div class="price-item">
                    <div>优惠</div>
                    <div>-&yen;0.00</div>
                </div>
                <div class="total-price">
                    <span>实付款</span>
                    <div>&yen;@pageData.Amount.ToString("F2")</div>
                </div>
                <div class="action-buttons">
                    <button type="button" class="btn-back" @onclick="HandleBack">返回购物车</button>
                    <button class="btn-submit" type="submit">提交订单</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

<AddressModal IsVisible="isAddressModalVisible"
              OnClose="HandleAddressModalClosed"
              OnAddressSelected="HandleAddressSelectedFromModal" />

@code {
    private PageData pageData = new();
    private bool submitAttempted = false;
    private bool isAddressModalVisible = false;

    [Parameter]
    public string? id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(Navigation.Uri);
        string token = AuthService.UserToken ?? "";
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var idParam))
        {
            var requestUrl = $"{Navigation.BaseUri}api/Index/order/{idParam}?token={token}";
            try
            {
                OrderDto? order = await Http.GetFromJsonAsync<OrderDto>(requestUrl);
                if (order != null)
                {
                    pageData.Id = order.Id;
                    pageData.Title = order.Title;
                    pageData.Cover = order.Cover;
                    if (!string.IsNullOrEmpty(pageData.Cover) && !pageData.Cover.StartsWith("images/") && !pageData.Cover.StartsWith("http"))
                    {
                        pageData.Cover = $"images/{pageData.Cover}";
                    }
                    pageData.Price = order.Price;
                    pageData.Count = order.Count > 0 ? order.Count : 1; // Ensure count is at least 1
                    if (decimal.TryParse(pageData.Price, out var p))
                    {
                        pageData.Amount = p * pageData.Count;
                    }
                    else
                    {
                        pageData.Amount = 0;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching order details: {ex.Message}");
                // Potentially navigate away or show error
            }
        }
        else
        {
            // Handle case where id is not provided - maybe from cart?
            // This part of your logic might need to be adjusted if 'id' is not always from query param for confirm page.
            // If coming from cart with multiple items, the structure would be different.
            // For now, assuming 'id' query param is the primary way to get order info.
             if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("title", out var titleParam)) pageData.Title = titleParam;
             if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("cover", out var coverParam))
             {
                pageData.Cover = coverParam;
                 if (!string.IsNullOrEmpty(pageData.Cover) && !pageData.Cover.StartsWith("images/") && !pageData.Cover.StartsWith("http"))
                 {
                    pageData.Cover = $"images/{pageData.Cover}";
                 }
             }
             if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("price", out var priceParam)) pageData.Price = priceParam;
             if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("count", out var countParam) && int.TryParse(countParam, out int c))
             {
                 pageData.Count = c > 0 ? c : 1;
             } else {
                 pageData.Count = 1;
             }

             if (decimal.TryParse(pageData.Price, out var p))
             {
                 pageData.Amount = p * pageData.Count;
             }
        }

        await ListAddressData(); // Load default/first address
        StateHasChanged();
    }

    private void ShowAddressModal()
    {
        isAddressModalVisible = true;
        StateHasChanged();
    }

    private void HandleAddressModalClosed(bool dummy) // Parameter matches EventCallback<bool>
    {
        isAddressModalVisible = false;
        StateHasChanged();
    }

    private void HandleAddressSelectedFromModal(Address selectedAddress)
    {
        pageData.ReceiverName = selectedAddress.Name;
        pageData.ReceiverPhone = selectedAddress.Mobile;
        pageData.ReceiverAddress = selectedAddress.Description;
        isAddressModalVisible = false; // Close modal
        submitAttempted = false; // Reset submit attempt if user fixed the address
        StateHasChanged();
    }

    private void OnCountChange(int count)
    {
        pageData.Count = count;
        if (decimal.TryParse(pageData.Price, out var o))
        {
            pageData.Amount = o * count;
        }
        StateHasChanged();
    }
    private async Task OnOrderDelete(long id)
    {
        pageData.Amount = 0;
        pageData.Count = 0;
        StateHasChanged();
    }

    private void HandleBack() => Navigation.NavigateTo("/cart"); // Or to cart page, ensure "/cart" is correct

    private async Task HandleJiesuan()
    {
        submitAttempted = true;
        if (string.IsNullOrEmpty(pageData.ReceiverName) || pageData.ReceiverAddress == null) // More robust check
        {
            Console.WriteLine("请选择或添加一个有效的收货地址。");
            StateHasChanged();
            return;
        }

        Console.WriteLine("表单有效，准备结算...");
        // Here you would normally create the order on the backend using all pageData including selected address
        var orderPayload = new OrderSubmissionDto
        {
            ProductId = pageData.Id, // Or whatever identifies the product(s)
            Quantity = pageData.Count,
            Remark = pageData.Remark,
            ReceiverName = pageData.ReceiverName,
            ReceiverPhone = pageData.ReceiverPhone,
            ReceiverAddress = pageData.ReceiverAddress,
            TotalAmount = pageData.Amount
            // Add any other fields your backend expects for order creation
        };

        string token = AuthService.UserToken ?? "";
        // Example: POST to an endpoint that finalizes the order
        // var response = await Http.PostAsJsonAsync($"{Navigation.BaseUri}api/Index/FinalizeOrder?token={token}", orderPayload);

        // if (response.IsSuccessStatusCode)
        // {
        //    var finalizedOrder = await response.Content.ReadFromJsonAsync<FinalizedOrderResultDto>();
        //    Console.WriteLine("结算成功，跳转支付页面");
        //    Navigation.NavigateTo($"/pay?orderId={finalizedOrder.OrderId}&amount={finalizedOrder.AmountToPay}");
        // }
        // else
        // {
        //     Console.WriteLine($"结算失败: {await response.Content.ReadAsStringAsync()}");
        //     // Show error to user
        //     return;
        // }

        // --- SIMULATED SUCCESS FOR NOW ---
        await Task.Delay(500); // Simulate API call
        long backendOrderId = pageData.Id ?? new Random().Next(1000, 9999); // Simulated
        Console.WriteLine($"结算成功 (模拟), Order ID: {backendOrderId}, 跳转支付页面");
        Navigation.NavigateTo($"/pay?orderId={backendOrderId}&amount={pageData.Amount}");
        // --- END SIMULATION ---
    }
    
    // DTO for submitting order
    public class OrderSubmissionDto
    {
        public long? ProductId { get; set; }
        public int Quantity { get; set; }
        public string? Remark { get; set; }
        public string? ReceiverName { get; set; }
        public string? ReceiverPhone { get; set; }
        public string? ReceiverAddress { get; set; }
        public decimal TotalAmount { get; set; }
    }


    private async Task ListAddressData()
    {
        string token = AuthService.UserToken ?? "";
        var requestUrl = $"{Navigation.BaseUri}api/Index/addresses?token={token}";
        try
        {
            List<Address>? res = await Http.GetFromJsonAsync<List<Address>>(requestUrl);

            if (res != null && res.Any())
            {
                // Prefer default, then first, or let user select if no explicit default logic
                // For now, using the first one as a pre-fill if no other logic dictates
                @* var defaultAddr = res.FirstOrDefault(a => a.IsDefault) ?? res[0]; *@
                var defaultAddr = res[0];
                pageData.ReceiverName = defaultAddr.Name;
                pageData.ReceiverPhone = defaultAddr.Mobile;
                pageData.ReceiverAddress = defaultAddr.Description;
            }
            else
            {
                pageData.ReceiverName = null;
                pageData.ReceiverPhone = null;
                pageData.ReceiverAddress = null;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching addresses: {ex.Message}");
            pageData.ReceiverName = null;
            pageData.ReceiverPhone = null;
            pageData.ReceiverAddress = null;
        }
        // No StateHasChanged() here as it's called at the end of OnInitializedAsync
    }

    public class PageData // This class is defined within Confirm.razor
    {
        public long? Id { get; set; } // Could be product ID or initial order ID

        [Required(ErrorMessage = "商品标题不能为空")]
        public string? Title { get; set; }
        public string? Cover { get; set; }

        [Required(ErrorMessage = "价格不能为空")]
        [RegularExpression(@"^\d+(\.\d{1,2})?$", ErrorMessage = "价格格式无效")]
        public string? Price { get; set; }

        [Range(1, 100, ErrorMessage = "数量必须在1到100之间")]
        public int Count { get; set; } = 1;
        public decimal Amount { get; set; }

        [MaxLength(100, ErrorMessage = "备注不能超过100个字符")]
        public string? Remark { get; set; }

        // Receiver fields are now critical and validated implicitly by HandleJiesuan
        public string? ReceiverName { get; set; }
        public string? ReceiverPhone { get; set; }
        public string? ReceiverAddress { get; set; }
    }

    // DTO for data from /api/Index/order/{id}
    public class OrderDto
    {
        public long Id { get; set; }
        public string? Title { get; set; }
        public string? Cover { get; set; }
        public string? Price { get; set; }
        public int Count { get; set; }
        // Add other fields if your DTO has them
    }
}