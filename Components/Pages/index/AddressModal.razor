@using System.ComponentModel.DataAnnotations
@using Data
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthService AuthService // Assuming you need token for POST

@if (IsVisible)
{
    <div class="modal-backdrop show"></div>
    <div class="modal fade show" tabindex="-1" style="display: block;" role="dialog">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">管理收货地址</h5>
                    <button type="button" class="btn-close" onclick="@CloseModal"></button>
                </div>
                <div class="modal-body">
                    @if (isLoading)
                    {
                        <p>正在加载地址...</p>
                    }
                    else
                    {
                        <h6>选择现有地址:</h6>
                        @if (addresses != null && addresses.Any())
                        {
                            <ul class="list-group mb-3">
                                @foreach (var addr in addresses)
                                {
                                    <li class="list-group-item list-group-item-action @(selectedAddressId == addr.Id ? "active" : "")"
                                        @onclick="() => SelectAddress(addr)">
                                        <strong>@addr.Name</strong> - @addr.Mobile <br />
                                        <small>@addr.Description</small>
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>没有找到现有地址。</p>
                        }

                        <hr />

                        <h6>或添加新地址:</h6>
                        <EditForm Model="newAddress" OnValidSubmit="HandleAddNewAddress">
                            <DataAnnotationsValidator />
                            <div class="mb-2">
                                <label class="form-label">收货人姓名:</label>
                                <InputText class="form-control" @bind-Value="newAddress.Name" />
                                <ValidationMessage For="@(() => newAddress.Name)" />
                            </div>
                            <div class="mb-2">
                                <label class="form-label">手机号码:</label>
                                <InputText class="form-control" @bind-Value="newAddress.Mobile" />
                                <ValidationMessage For="@(() => newAddress.Mobile)" />
                            </div>
                            <div class="mb-2">
                                <label class="form-label">详细地址:</label>
                                <InputTextArea class="form-control" @bind-Value="newAddress.Description" />
                                <ValidationMessage For="@(() => newAddress.Description)" />
                            </div>
                            <button type="submit" class="btn btn-primary mt-2" disabled="@isSavingNewAddress">
                                @if (isSavingNewAddress)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span> 保存中...</span>
                                }
                                else
                                {
                                    <span>保存新地址</span>
                                }
                            </button>
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger mt-2">@errorMessage</div>
                            }
                        </EditForm>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" onclick="@CloseModal">关闭</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    [Parameter] public EventCallback<Address> OnAddressSelected { get; set; }

    private List<Address>? addresses;
    private NewAddressModel newAddress = new();
    private bool isLoading = true;
    private bool isSavingNewAddress = false;
    private string? errorMessage;
    private long? selectedAddressId; // To highlight selected address

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && addresses == null) // Load addresses only when modal becomes visible and not already loaded
        {
            await LoadAddressesAsync();
        }
    }

    private async Task LoadAddressesAsync()
    {
        isLoading = true;
        errorMessage = null;
        string token = AuthService.UserToken ?? "";
        var requestUrl = $"{Navigation.BaseUri}api/Index/addresses?token={token}";
        try
        {
            addresses = await Http.GetFromJsonAsync<List<Address>>(requestUrl);
        }
        catch (Exception ex)
        {
            errorMessage = $"加载地址失败: {ex.Message}";
            Console.WriteLine(errorMessage);
            addresses = new List<Address>(); // Ensure not null
        }
        isLoading = false;
        StateHasChanged();
    }

    private async Task HandleAddNewAddress()
    {
        isSavingNewAddress = true;
        errorMessage = null;
        string token = AuthService.UserToken ?? "";
        var requestUrl = $"{Navigation.BaseUri}api/Index/addresses?token={token}";

        try
        {
            // Assuming your API returns the created address or at least an ID
            // You might need to adjust this based on your API's response
            var response = await Http.PostAsJsonAsync(requestUrl, newAddress);
            if (response.IsSuccessStatusCode)
            {
                Address? createdAddress = await response.Content.ReadFromJsonAsync<Address>();
                if (createdAddress != null)
                {
                    var newlyAddedAddress = new Address
                    {
                        Id = createdAddress.Id, // If API returns ID
                        Name = newAddress.Name,
                        Mobile = newAddress.Mobile,
                        Description = newAddress.Description
                    };
                    await OnAddressSelected.InvokeAsync(newlyAddedAddress); // Send back the data we have
                    await CloseModal(true); // Close after successful add & select
                    newAddress = new(); // Reset form
                }
                else
                {
                     errorMessage = "添加新地址成功，但未能获取返回数据。请尝试手动选择。";
                     await LoadAddressesAsync(); // Refresh list
                }
            }
            else
            {
                errorMessage = $"添加地址失败: {await response.Content.ReadAsStringAsync()} (状态码: {response.StatusCode})";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"添加地址时出错: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        isSavingNewAddress = false;
        StateHasChanged();
    }

    private async Task SelectAddress(Address address)
    {
        selectedAddressId = address.Id;
        await OnAddressSelected.InvokeAsync(address);
        await CloseModal(true); // Close after selection
    }

    private async Task CloseModal(bool addressSelected = false)
    {
        // Reset state if needed
        if (!addressSelected)
        {
            selectedAddressId = null; // Clear selection if just closing
        }
        addresses = null; // Force reload next time it opens
        await OnClose.InvokeAsync(false); // Signal parent to hide modal
    }

    // ViewModel for the new address form
    public class NewAddressModel
    {
        [Required(ErrorMessage = "请输入收货人姓名")]
        [MaxLength(50, ErrorMessage = "姓名过长")]
        public string? Name { get; set; }

        [Required(ErrorMessage = "请输入手机号码")]
        [RegularExpression(@"^1[3-9]\d{9}$", ErrorMessage = "手机号码格式不正确")]
        public string? Mobile { get; set; }

        [Required(ErrorMessage = "请输入详细地址")]
        [MaxLength(200, ErrorMessage = "详细地址过长")]
        public string? Description { get; set; }
    }
}