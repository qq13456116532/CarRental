@page "/my-collections"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthService AuthService
@using Services

<div class="content-list">
    <div class="list-title">我的收藏</div>
    <div role="tablist" class="list-tabs-view flex-view">
        @* Tabs can be added here if needed in the future *@
    </div>
    <div class="list-content">
        <div class="collect-thing-view">
            @if (CollectData != null && CollectData.Any())
            {
                <div class="thing-list"> @* Removed .flex-view, using CSS Grid now *@
                    @foreach (var item in CollectData)
                    {
                        <div class="thing-item"> @* Removed .item-column-3 *@
                            <div class="remove" title="取消收藏" @onclick="() => HandleRemove(item)">
                                &#x2715; @* Using an 'X' character; an SVG or icon font could also be used *@
                            </div>
                            <div class="img-view" @onclick="() => HandleClickItem(item)">
                                <img src="@item.Cover" alt="@item.Title" />
                            </div>
                            <div class="info-view">
                                <h3 class="thing-name" title="@item.Title">@item.Title</h3>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="empty-collections-message">您的收藏夹还是空的，快去发现喜欢的内容吧！</div> @* Updated class and message *@
            }
        </div>
    </div>
</div>

@code {
    private List<CollectedThingDto> CollectData = new List<CollectedThingDto>();

    protected override async Task OnInitializedAsync()
    {
        await GetCollectThingList();
    }

    private void HandleClickItem(CollectedThingDto item)
    {
        var url = $"/detail?id={item.id}";
        // Navigation.NavigateTo(url, true); // forceLoad: true can be jarring, remove unless page must reinitialize fully
        Navigation.NavigateTo(url);
    }

    private async Task HandleRemove(CollectedThingDto item)
    {
        try
        {
            if (string.IsNullOrEmpty(AuthService.UserToken))
            {
                Console.WriteLine("User token is missing. Cannot remove item from collections.");
                // Optionally, notify user or redirect to login
                return;
            }
            var response = await Http.DeleteAsync($"{Navigation.BaseUri}api/Index/things/collect/{item.id}?token={AuthService.UserToken}");
            if (response.IsSuccessStatusCode)
            {
                CollectData.Remove(item); // Optimistic UI update
                StateHasChanged(); // Notify Blazor that the UI needs to re-render
            }
            else
            {
                Console.WriteLine($"Failed to remove item from collections: {response.StatusCode}");
                // Optionally, show an error message to the user
                // await GetCollectThingList(); // Fallback to refetching if optimistic update is not preferred
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing item from collections: {ex.Message}");
        }
    }

    private async Task GetCollectThingList()
    {
        try
        {
            var token = AuthService.UserToken;
            if (string.IsNullOrEmpty(token))
            {
                Console.WriteLine("User token is missing. Cannot fetch collections.");
                CollectData = new List<CollectedThingDto>(); // Ensure list is empty
                StateHasChanged();
                return;
            }
            var fetchedData = await Http.GetFromJsonAsync<List<CollectedThingDto>>($"{Navigation.BaseUri}api/Index/things/collect?token={token}");
            CollectData = fetchedData ?? new List<CollectedThingDto>();

            // Handle image paths
            foreach (var item in CollectData)
            {
                if (string.IsNullOrEmpty(item.Cover)) {
                    item.Cover = "images/placeholder.jpg"; // Default placeholder image
                }
                else if (!item.Cover.StartsWith("images/") && !item.Cover.StartsWith("http")) {
                    item.Cover = $"images/{item.Cover}"; // Prepend path if it's a relative local image
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching collections: {ex.Message}");
            CollectData = new List<CollectedThingDto>(); // Ensure list is empty on error
        }
        StateHasChanged(); // Ensure UI updates after fetching data
    }

}